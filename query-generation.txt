
This is how queries are written: 
    - SELECT 
    - FROM 
    - WHERE
    - GROUP BY
    - HAVING
    - ORDER BY
    - LIMIT

This is how queries are executed by the database 

    - FROM 
            load tables, apply joins, STEs, subqueries. This is the data source. 

    - WHERE 
            Row-level filtering (before grouping or aggregation)

    - GROUP BY 
            groups rows for aggregation (like SUM(), COUNT(), etc.)

    - HAVING 
            group-level filtering (after aggregation) 

    - SELECT 
            pick columns and compute aggregates

    - ORDER BY 
            sort the resulting set 
    
    - LIMIT 
            Return only N rows. 

Approaching a query problem: 
    1. What columns do i need to return 
    2. What filtering conditions are there (on raw rows vs. on groups)
    3. Are there aggregations? (counts, sums, averages) 
    4. Any groupings? (by customer, by category, by date) 
    5. Any ordering? or top N?

Build in layers: 
    Start with the FROM and WHERE. Run partial queries to test them.
    Example: 
    
    # step 1.  get the data u are working with 
    > SELECT * FROM Orders;

    # step 2. Add filtering 
    > SELECT * FROM Orders WHERE status = 'shipped';

    # step 3. add grouping and aggregates 
    > SELECT customer_id, COUNT(*) FROM Orders WHERE status = 'shipped' GROUP BY customer_id;

    # step 4. add HAVING if needed 
    > select customer_id, COUNT(*) as total FROM Orders 
    > WHERE status='shipped'
    > GROUP BY customer_id
    > HAVING total > 5;

    # step 5: add ORDER BY and LIMIT 
    > ...
    > ORDER BY total DESC 
    > LIMIT 10;

Common things to avoid: 
    - Dont use aggregates in WHERE (use HAVING instead) 
    - Make sure every column in SELECT is either in GROUP BY or wrapped in an aggregate function 
    - Column aliases defined in SELECT cant be used in WHERE, but can be used in ORDER BY 

